{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Nav","listTag","i","this","props","list","length","li","push","key","id","data-id","onClick","e","preventDefault","console","log","target","dataset","bind","href","title","Component","Article","desc","NowLoading","App","state","article","item","isLoading","items","newList","Object","assign","setState","fetch","then","result","json","NavTag","newArticle","ArticleTag","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kOAGMA,G,6KAIF,IADA,IAAIC,EAAU,GACNC,EAAE,EAAGA,EAAEC,KAAKC,MAAMC,KAAKC,OAAQJ,IAAK,CAC1C,IAAIK,EAAKJ,KAAKC,MAAMC,KAAKH,GACzBD,EAAQO,KACN,wBAAIC,IAAKF,EAAGG,GAAIC,UAASJ,EAAGG,GAAIE,QAAS,SAASC,GAChDA,EAAEC,iBACFC,QAAQC,IAAI,WACZb,KAAKC,MAAMQ,QAAQC,EAAEI,OAAOC,QAAQR,KACpCS,KAAKhB,OACL,uBAAGiB,KAAMb,EAAGG,IACPH,EAAGc,SAId,OACE,6BACE,4BACGpB,Q,GApBOqB,cA2BZC,E,uKAEF,OACE,iCACE,4BAAKpB,KAAKC,MAAMiB,OACflB,KAAKC,MAAMoB,U,GALEF,aAWhBG,E,uKAEF,OACE,mD,GAHmBH,aA4EVI,E,4MApEbC,MAAQ,CACNC,QAAQ,CACNC,KAAK,CAACR,MAAQ,UAAWG,KAAK,0BAC9BM,WAAU,GAEZzB,KAAK,CACH0B,MAAQ,GACRD,WAAU,I,kEAIZ,IAAIE,EAAUC,OAAOC,OAAO,GAAI/B,KAAKwB,MAAMtB,KAAM,CAACyB,WAAU,IAC5D3B,KAAKgC,SAAS,CAAC9B,KAAK2B,IACpBI,MAAM,eACHC,MAAK,SAASC,GACb,OAAOA,EAAOC,UAEfF,KAAK,SAASE,GACbxB,QAAQC,IAAIuB,GACZpC,KAAKgC,SAAS,CAAC9B,KAAK,CAClB0B,MAAMQ,EACNT,WAAU,MAEZX,KAAKhB,S,+BAIT,IAAIqC,EAAS,KAEXA,EADCrC,KAAKwB,MAAMtB,KAAKyB,UACR,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAKzB,KAAMF,KAAKwB,MAAMtB,KAAK0B,MAAOnB,QAAS,SAASF,GAC3D,IAAI+B,EAAaR,OAAOC,OAAO,GAAI/B,KAAKwB,MAAMC,QAAS,CAACE,WAAU,IAClE3B,KAAKgC,SAAS,CAACP,QAAQa,IACvBL,MAAM,KAAK1B,EAAG,SACX2B,MAAK,SAASC,GACb,OAAOA,EAAOC,UAEfF,KAAK,SAASE,GACbpC,KAAKgC,SAAS,CACZP,QAAS,CACPC,KAAK,CACHR,MAAQkB,EAAKlB,MACbG,KAAMe,EAAKf,MAEbM,WAAU,MAGdX,KAAKhB,QACTgB,KAAKhB,QAGT,IAAIuC,EAAa,KAMjB,OAJEA,EADCvC,KAAKwB,MAAMC,QAAQE,UACP,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAST,MAAOlB,KAAKwB,MAAMC,QAAQC,KAAKR,MAAOG,KAAMrB,KAAKwB,MAAMC,QAAQC,KAAKL,OAG1F,yBAAKmB,UAAU,OACf,6CACCH,EACAE,O,GA/DWpB,aCpCEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.41de3325.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Nav extends Component {\n  \n  render() {\n    var listTag = [];\n    for(var i=0; i<this.props.list.length; i++) {\n      var li = this.props.list[i];\n      listTag.push(\n        <li key={li.id} data-id={li.id} onClick={function(e){\n          e.preventDefault();\n          console.log('trigger');\n          this.props.onClick(e.target.dataset.id) //dataset은 data-로 시작하는 애\n        }.bind(this)}>\n          <a href={li.id}>\n              {li.title}\n          </a>\n        </li>)\n    }\n    return (\n      <nav>\n        <ul>\n          {listTag}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nclass Article extends Component {\n  render(){\n    return (\n      <article>\n        <h2>{this.props.title}</h2>\n        {this.props.desc}\n      </article>\n    );\n  }\n}\n\nclass NowLoading extends Component {\n  render(){\n    return(\n      <div>Now Loading...</div>\n    );\n  }\n}\nclass App extends Component {\n  state = {\n    article:{\n      item:{title : \"Welcome\", desc:\"Hello, React and AJAX!\"},\n      isLoading:false //로딩중일때 true\n    },\n    list:{\n      items : [],\n      isLoading:false\n    }\n  }\n  componentDidMount(){\n    var newList = Object.assign({}, this.state.list, {isLoading:true});\n    this.setState({list:newList});\n    fetch('./list.json')\n      .then(function(result){\n        return result.json();\n      })\n      .then(function(json){\n        console.log(json);\n        this.setState({list:{\n          items:json,\n          isLoading:false\n        }});\n      }.bind(this))\n  }\n\n  render(){\n    var NavTag = null;\n    if(this.state.list.isLoading){\n      NavTag = <NowLoading></NowLoading>\n    } else {\n      NavTag = <Nav list={this.state.list.items} onClick={function(id){\n        var newArticle = Object.assign({}, this.state.article, {isLoading:true});\n        this.setState({article:newArticle});\n        fetch('./'+id+'.json')\n          .then(function(result){\n            return result.json();\n          })\n          .then(function(json){\n            this.setState({\n              article: {\n                item:{\n                  title : json.title,\n                  desc: json.desc\n                },\n                isLoading:false\n              }\n            })\n          }.bind(this));\n      }.bind(this)}></Nav>\n    }\n\n    var ArticleTag = null;\n    if(this.state.article.isLoading){\n      ArticleTag = <NowLoading></NowLoading>\n    } else {\n      ArticleTag = <Article title={this.state.article.item.title} desc={this.state.article.item.desc}></Article>\n    }\n    return (\n      <div className=\"App\">\n      <h1>Who is Jenny?</h1>\n      {NavTag}\n      {ArticleTag}\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}